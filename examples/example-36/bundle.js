(function (d3$1) {
  'use strict';

  const stringTimes = [
    {
      tijdstipRegistratie: '2020-01-01T08:00:00',
      eindRegistratie:  '2020-02-01T08:00:00',
      beginGeldigheid: '2020-01-02',
      eindGeldigheid: null,
      value: 'versie 1',
    },

    {
      tijdstipRegistratie: '2020-02-01T08:00:00',
      eindRegistratie: null,
      beginGeldigheid: '2020-01-02',
      eindGeldigheid: '2020-02-02',
      value: 'versie 1',
    },
    {
      tijdstipRegistratie: '2020-02-01T08:00:00',
      eindRegistratie: '2020-03-01T08:00:00',
      beginGeldigheid: '2020-02-02',
      eindGeldigheid: null,
      value: 'versie 2',
    },
      
    {
      tijdstipRegistratie: '2020-03-01T08:00:00',
      eindRegistratie: null,
      beginGeldigheid: '2020-02-02',
      eindGeldigheid: '2020-03-02',
      value: 'versie 2',
    },
    
    {
      tijdstipRegistratie: '2020-03-01T08:00:00',
      eindRegistratie: '2020-04-01T08:00:00',
      beginGeldigheid: '2020-03-02',
      eindGeldigheid: null,
      value: 'versie 3',
    },
    
    {
      tijdstipRegistratie: '2020-04-01T08:00:00',
      eindRegistratie: null,
      beginGeldigheid: '2020-03-02',
      eindGeldigheid: '2020-04-02',
      value: 'versie 3',
    },
    {
      tijdstipRegistratie: '2020-04-01T08:00:00',
      eindRegistratie: null,
      beginGeldigheid: '2020-04-02',
      eindGeldigheid: null,
      value: 'versie 4',
    },  
  ];

  var timeTable = [];

  stringTimes.forEach((d) => {
    let timeLine = {};
    timeLine.tijdstipRegistratie = new Date(d.tijdstipRegistratie + 'Z');
    timeLine.eindRegistratie = (timeLine.eindRegistratie !== null) ? new Date(d.eindRegistratie + 'Z') : null;
    timeLine.beginGeldigheid = new Date(d.beginGeldigheid + 'Z');
    timeLine.eindGeldigheid = (timeLine.eindGeldigheid  !== null) ? new Date(d.eindGeldigheid + 'Z'): null;
    timeLine.value = d.value;

    timeTable.push(timeLine);
  });

  const timePlot = () => {
    let width;
    let height;
    let data;
    let xbValue;
    let xeValue;
    let ybValue;
    let yeValue;
    let value;
    let margin;

    const my = (selection) => {
      // date function
      // - check dates
      // - addDate - for not yet ended periods
      //
      function isValidDate(d) {
        return d instanceof Date && !isNaN(d);
      }

      function addDate(d, numberdays) {
        let rtime = new Date(d);

        return new Date(
          rtime.getTime() +
            numberdays * 24 * 60 * 60 * 1000
        );
      }

      // determine maximum values for registrie/geldigheid of dataset
      const tempxMax = d3$1.max(data, (d) =>
        isValidDate(d.eindRegistratie)
          ? d.eindRegistratie
          : d.tijdstipRegistratie
      );

      const tempyMax = d3$1.max(data, (d) =>
        isValidDate(d.eindGeldigheid)
          ? d.eindGeldigheid
          : d.beginGeldigheid
      );

      // determine maximum values for the graph
      // for not yet defined eindregistratie/eindgeldigheid use temporary maximum and add 7 days
      const xMax = addDate(tempxMax, 7);

      const yMax = addDate(tempyMax, 7);

      // Generate temporary data set with adjusted maximum for eindregistratie/eindgeldighei
      const tmarks = data.map((d) => ({
        beginGeldigheid: d.beginGeldigheid,
        eindGeldigheid: isValidDate(
          d.eindGeldigheid
        )
          ? d.eindGeldigheid
          : yMax,
        tijdstipRegistratie: d.tijdstipRegistratie,
        eindRegistratie: isValidDate(
          d.eindRegistratie
        )
          ? d.eindRegistratie
          : xMax,
        value: d.value,
      }));

      // Define x/y scales
      const x = d3$1.scaleTime()
        .domain([
          d3$1.min(tmarks, xbValue),
          d3$1.max(tmarks, xeValue),
        ])
        .range([margin.left, width - margin.right]);

      const y = d3$1.scaleTime()
        .domain([
          d3$1.min(tmarks, ybValue),
          d3$1.max(tmarks, yeValue),
        ])
        .range([
          height - margin.bottom,
          margin.top,
        ]);

      // Generate dataset for visualisation
      // especially calculate width/height of timeboxes
      const marks = tmarks.map((d, i) => ({
        x: x(xbValue(d)),
        y: y(yeValue(d)),
        tijdstipRegistratie: xbValue(d),
        eindRegistratie: xeValue(d),
        beginGeldigheid: ybValue(d),
        eindGeldigheid: yeValue(d),
        value: value(d),
        width: x(xeValue(d)) - x(xbValue(d)),
        height: y(ybValue(d)) - y(yeValue(d)),
      }));

      // create a tooltip
      // ref https://d3-graph-gallery.com/graph/interactivity_tooltip.html#mostbasic
      // https://stackoverflow.com/questions/65134858/d3-mouse-is-not-a-function
      //
      var tooltip = d3
        .select('#timeplot')
        .append('div')
        .style('opacity', 0)
        .attr('class', 'tooltip')
        .style('background-color', 'white')
        .style('border', 'solid')
        .style('position', 'absolute')
        .style('border-width', '2px')
        .style('border-radius', '5px')
        .style('padding', '5px')
        .style('z-index', '100');

      let mouseover = function (event, d) {
        tooltip.style('opacity', 1);
        d3.select(this)
          .style('fill', 'red')
          .style('opacity', 1);
      };

      let mousemove = function (event, d) {
        tooltip
          .html(
            'value: ' +
              d.value +
              '<br/>' +
              ' beginreg: ' +
              d.tijdstipRegistratie +
              '<br/>' +
              ' eindreg: ' +
              d.eindRegistratie +
              '<br/>' +
              ' begingeld: ' +
              d.beginGeldigheid +
              '<br/>' +
              ' eindgeld: ' +
              d.eindGeldigheid
          )
          .style('left', event.pageX + 5 + 'px')
          .style('top', event.pageY + 5 + 'px');
      };

      let mouseleave = function (event, d) {
        tooltip.style('opacity', 0);
        d3.select(this)
          .style('fill', 'none')
          .style('opacity', 0.8);
      };

      // Draw the graph
      selection
        .selectAll('rect')
        .data(marks)
        .join('rect')
        .attr('x', (d) => d.x)
        .attr('y', (d) => d.y)
        .attr('width', (d) => d.width)
        .attr('height', (d) => d.height)
        .on('mouseover', mouseover)
        .on('mousemove', mousemove)
        .on('mouseleave', mouseleave);

      selection
        .append('g')
        .attr(
          'transform',
          `translate(${margin.left},0)`
        )
        .call(d3$1.axisLeft(y));

      selection
        .append('g')
        .attr(
          'transform',
          `translate(0, ${height - margin.bottom})`
        )
        .call(d3$1.axisBottom(x));
    };

    my.width = function (_) {
      return arguments.length
        ? ((width = +_), my)
        : width;
    };

    my.height = function (_) {
      return arguments.length
        ? ((height = +_), my)
        : height;
    };

    my.data = function (_) {
      return arguments.length
        ? ((data = _), my)
        : data;
    };

    my.xbValue = function (_) {
      return arguments.length
        ? ((xbValue = _), my)
        : xbValue;
    };

    my.xeValue = function (_) {
      return arguments.length
        ? ((xeValue = _), my)
        : xeValue;
    };

    my.ybValue = function (_) {
      return arguments.length
        ? ((ybValue = _), my)
        : ybValue;
    };
    my.yeValue = function (_) {
      return arguments.length
        ? ((yeValue = _), my)
        : yeValue;
    };

    my.margin = function (_) {
      return arguments.length
        ? ((margin = _), my)
        : margin;
    };

    my.xWidth = function (_) {
      return arguments.length
        ? ((xWidth = _), my)
        : xWidth;
    };

    my.yHeight = function (_) {
      return arguments.length
        ? ((yHeight = _), my)
        : yHeight;
    };

    my.value = function (_) {
      return arguments.length
        ? ((value = _), my)
        : value;
    };

    return my;
  };

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3$1.select('#timeplot')
    .append('svg')
    .attr('width', width)
    .attr('height', height);


  const drawGraph = async () => {
    svg.call(
      timePlot()
        .width(width)
        .height(height)
        .data(timeTable)
        .xbValue((d) => d.tijdstipRegistratie)
        .xeValue((d) => d.eindRegistratie)
        .ybValue((d) => d.beginGeldigheid)
        .yeValue((d) => d.eindGeldigheid)
        .value((d) => d.value)
        .margin({
          top: 20,
          right: 20,
          bottom: 40,
          left: 50,
        })
    );
  };

  drawGraph();

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImRhdGEuanMiLCJ0aW1lUGxvdC5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3Qgc3RyaW5nVGltZXMgPSBbXG4gIHtcbiAgICB0aWpkc3RpcFJlZ2lzdHJhdGllOiAnMjAyMC0wMS0wMVQwODowMDowMCcsXG4gICAgZWluZFJlZ2lzdHJhdGllOiAgJzIwMjAtMDItMDFUMDg6MDA6MDAnLFxuICAgIGJlZ2luR2VsZGlnaGVpZDogJzIwMjAtMDEtMDInLFxuICAgIGVpbmRHZWxkaWdoZWlkOiBudWxsLFxuICAgIHZhbHVlOiAndmVyc2llIDEnLFxuICB9LFxuXG4gIHtcbiAgICB0aWpkc3RpcFJlZ2lzdHJhdGllOiAnMjAyMC0wMi0wMVQwODowMDowMCcsXG4gICAgZWluZFJlZ2lzdHJhdGllOiBudWxsLFxuICAgIGJlZ2luR2VsZGlnaGVpZDogJzIwMjAtMDEtMDInLFxuICAgIGVpbmRHZWxkaWdoZWlkOiAnMjAyMC0wMi0wMicsXG4gICAgdmFsdWU6ICd2ZXJzaWUgMScsXG4gIH0sXG4gIHtcbiAgICB0aWpkc3RpcFJlZ2lzdHJhdGllOiAnMjAyMC0wMi0wMVQwODowMDowMCcsXG4gICAgZWluZFJlZ2lzdHJhdGllOiAnMjAyMC0wMy0wMVQwODowMDowMCcsXG4gICAgYmVnaW5HZWxkaWdoZWlkOiAnMjAyMC0wMi0wMicsXG4gICAgZWluZEdlbGRpZ2hlaWQ6IG51bGwsXG4gICAgdmFsdWU6ICd2ZXJzaWUgMicsXG4gIH0sXG4gICAgXG4gIHtcbiAgICB0aWpkc3RpcFJlZ2lzdHJhdGllOiAnMjAyMC0wMy0wMVQwODowMDowMCcsXG4gICAgZWluZFJlZ2lzdHJhdGllOiBudWxsLFxuICAgIGJlZ2luR2VsZGlnaGVpZDogJzIwMjAtMDItMDInLFxuICAgIGVpbmRHZWxkaWdoZWlkOiAnMjAyMC0wMy0wMicsXG4gICAgdmFsdWU6ICd2ZXJzaWUgMicsXG4gIH0sXG4gIFxuICB7XG4gICAgdGlqZHN0aXBSZWdpc3RyYXRpZTogJzIwMjAtMDMtMDFUMDg6MDA6MDAnLFxuICAgIGVpbmRSZWdpc3RyYXRpZTogJzIwMjAtMDQtMDFUMDg6MDA6MDAnLFxuICAgIGJlZ2luR2VsZGlnaGVpZDogJzIwMjAtMDMtMDInLFxuICAgIGVpbmRHZWxkaWdoZWlkOiBudWxsLFxuICAgIHZhbHVlOiAndmVyc2llIDMnLFxuICB9LFxuICBcbiAge1xuICAgIHRpamRzdGlwUmVnaXN0cmF0aWU6ICcyMDIwLTA0LTAxVDA4OjAwOjAwJyxcbiAgICBlaW5kUmVnaXN0cmF0aWU6IG51bGwsXG4gICAgYmVnaW5HZWxkaWdoZWlkOiAnMjAyMC0wMy0wMicsXG4gICAgZWluZEdlbGRpZ2hlaWQ6ICcyMDIwLTA0LTAyJyxcbiAgICB2YWx1ZTogJ3ZlcnNpZSAzJyxcbiAgfSxcbiAge1xuICAgIHRpamRzdGlwUmVnaXN0cmF0aWU6ICcyMDIwLTA0LTAxVDA4OjAwOjAwJyxcbiAgICBlaW5kUmVnaXN0cmF0aWU6IG51bGwsXG4gICAgYmVnaW5HZWxkaWdoZWlkOiAnMjAyMC0wNC0wMicsXG4gICAgZWluZEdlbGRpZ2hlaWQ6IG51bGwsXG4gICAgdmFsdWU6ICd2ZXJzaWUgNCcsXG4gIH0sICBcbl07XG5cbmV4cG9ydCB2YXIgdGltZVRhYmxlID0gW107XG5cbnN0cmluZ1RpbWVzLmZvckVhY2goKGQpID0+IHtcbiAgbGV0IHRpbWVMaW5lID0ge307XG4gIHRpbWVMaW5lLnRpamRzdGlwUmVnaXN0cmF0aWUgPSBuZXcgRGF0ZShkLnRpamRzdGlwUmVnaXN0cmF0aWUgKyAnWicpO1xuICB0aW1lTGluZS5laW5kUmVnaXN0cmF0aWUgPSAodGltZUxpbmUuZWluZFJlZ2lzdHJhdGllICE9PSBudWxsKSA/IG5ldyBEYXRlKGQuZWluZFJlZ2lzdHJhdGllICsgJ1onKSA6IG51bGw7XG4gIHRpbWVMaW5lLmJlZ2luR2VsZGlnaGVpZCA9IG5ldyBEYXRlKGQuYmVnaW5HZWxkaWdoZWlkICsgJ1onKTtcbiAgdGltZUxpbmUuZWluZEdlbGRpZ2hlaWQgPSAodGltZUxpbmUuZWluZEdlbGRpZ2hlaWQgICE9PSBudWxsKSA/IG5ldyBEYXRlKGQuZWluZEdlbGRpZ2hlaWQgKyAnWicpOiBudWxsO1xuICB0aW1lTGluZS52YWx1ZSA9IGQudmFsdWU7XG5cbiAgdGltZVRhYmxlLnB1c2godGltZUxpbmUpO1xufSk7XG5cblxuIiwiaW1wb3J0IHtcbiAgc2NhbGVUaW1lLFxuICBheGlzTGVmdCxcbiAgYXhpc0JvdHRvbSxcbiAgbWluLFxuICBtYXgsXG59IGZyb20gJ2QzJztcblxuZXhwb3J0IGNvbnN0IHRpbWVQbG90ID0gKCkgPT4ge1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGxldCBkYXRhO1xuICBsZXQgeGJWYWx1ZTtcbiAgbGV0IHhlVmFsdWU7XG4gIGxldCB5YlZhbHVlO1xuICBsZXQgeWVWYWx1ZTtcbiAgbGV0IHZhbHVlO1xuICBsZXQgbWFyZ2luO1xuXG4gIGNvbnN0IG15ID0gKHNlbGVjdGlvbikgPT4ge1xuICAgIC8vIGRhdGUgZnVuY3Rpb25cbiAgICAvLyAtIGNoZWNrIGRhdGVzXG4gICAgLy8gLSBhZGREYXRlIC0gZm9yIG5vdCB5ZXQgZW5kZWQgcGVyaW9kc1xuICAgIC8vXG4gICAgZnVuY3Rpb24gaXNWYWxpZERhdGUoZCkge1xuICAgICAgcmV0dXJuIGQgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGREYXRlKGQsIG51bWJlcmRheXMpIHtcbiAgICAgIGxldCBydGltZSA9IG5ldyBEYXRlKGQpO1xuXG4gICAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICAgIHJ0aW1lLmdldFRpbWUoKSArXG4gICAgICAgICAgbnVtYmVyZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZGV0ZXJtaW5lIG1heGltdW0gdmFsdWVzIGZvciByZWdpc3RyaWUvZ2VsZGlnaGVpZCBvZiBkYXRhc2V0XG4gICAgY29uc3QgdGVtcHhNYXggPSBtYXgoZGF0YSwgKGQpID0+XG4gICAgICBpc1ZhbGlkRGF0ZShkLmVpbmRSZWdpc3RyYXRpZSlcbiAgICAgICAgPyBkLmVpbmRSZWdpc3RyYXRpZVxuICAgICAgICA6IGQudGlqZHN0aXBSZWdpc3RyYXRpZVxuICAgICk7XG5cbiAgICBjb25zdCB0ZW1weU1heCA9IG1heChkYXRhLCAoZCkgPT5cbiAgICAgIGlzVmFsaWREYXRlKGQuZWluZEdlbGRpZ2hlaWQpXG4gICAgICAgID8gZC5laW5kR2VsZGlnaGVpZFxuICAgICAgICA6IGQuYmVnaW5HZWxkaWdoZWlkXG4gICAgKTtcblxuICAgIC8vIGRldGVybWluZSBtYXhpbXVtIHZhbHVlcyBmb3IgdGhlIGdyYXBoXG4gICAgLy8gZm9yIG5vdCB5ZXQgZGVmaW5lZCBlaW5kcmVnaXN0cmF0aWUvZWluZGdlbGRpZ2hlaWQgdXNlIHRlbXBvcmFyeSBtYXhpbXVtIGFuZCBhZGQgNyBkYXlzXG4gICAgY29uc3QgeE1heCA9IGFkZERhdGUodGVtcHhNYXgsIDcpO1xuXG4gICAgY29uc3QgeU1heCA9IGFkZERhdGUodGVtcHlNYXgsIDcpO1xuXG4gICAgLy8gR2VuZXJhdGUgdGVtcG9yYXJ5IGRhdGEgc2V0IHdpdGggYWRqdXN0ZWQgbWF4aW11bSBmb3IgZWluZHJlZ2lzdHJhdGllL2VpbmRnZWxkaWdoZWlcbiAgICBjb25zdCB0bWFya3MgPSBkYXRhLm1hcCgoZCkgPT4gKHtcbiAgICAgIGJlZ2luR2VsZGlnaGVpZDogZC5iZWdpbkdlbGRpZ2hlaWQsXG4gICAgICBlaW5kR2VsZGlnaGVpZDogaXNWYWxpZERhdGUoXG4gICAgICAgIGQuZWluZEdlbGRpZ2hlaWRcbiAgICAgIClcbiAgICAgICAgPyBkLmVpbmRHZWxkaWdoZWlkXG4gICAgICAgIDogeU1heCxcbiAgICAgIHRpamRzdGlwUmVnaXN0cmF0aWU6IGQudGlqZHN0aXBSZWdpc3RyYXRpZSxcbiAgICAgIGVpbmRSZWdpc3RyYXRpZTogaXNWYWxpZERhdGUoXG4gICAgICAgIGQuZWluZFJlZ2lzdHJhdGllXG4gICAgICApXG4gICAgICAgID8gZC5laW5kUmVnaXN0cmF0aWVcbiAgICAgICAgOiB4TWF4LFxuICAgICAgdmFsdWU6IGQudmFsdWUsXG4gICAgfSkpO1xuXG4gICAgLy8gRGVmaW5lIHgveSBzY2FsZXNcbiAgICBjb25zdCB4ID0gc2NhbGVUaW1lKClcbiAgICAgIC5kb21haW4oW1xuICAgICAgICBtaW4odG1hcmtzLCB4YlZhbHVlKSxcbiAgICAgICAgbWF4KHRtYXJrcywgeGVWYWx1ZSksXG4gICAgICBdKVxuICAgICAgLnJhbmdlKFttYXJnaW4ubGVmdCwgd2lkdGggLSBtYXJnaW4ucmlnaHRdKTtcblxuICAgIGNvbnN0IHkgPSBzY2FsZVRpbWUoKVxuICAgICAgLmRvbWFpbihbXG4gICAgICAgIG1pbih0bWFya3MsIHliVmFsdWUpLFxuICAgICAgICBtYXgodG1hcmtzLCB5ZVZhbHVlKSxcbiAgICAgIF0pXG4gICAgICAucmFuZ2UoW1xuICAgICAgICBoZWlnaHQgLSBtYXJnaW4uYm90dG9tLFxuICAgICAgICBtYXJnaW4udG9wLFxuICAgICAgXSk7XG5cbiAgICAvLyBHZW5lcmF0ZSBkYXRhc2V0IGZvciB2aXN1YWxpc2F0aW9uXG4gICAgLy8gZXNwZWNpYWxseSBjYWxjdWxhdGUgd2lkdGgvaGVpZ2h0IG9mIHRpbWVib3hlc1xuICAgIGNvbnN0IG1hcmtzID0gdG1hcmtzLm1hcCgoZCwgaSkgPT4gKHtcbiAgICAgIHg6IHgoeGJWYWx1ZShkKSksXG4gICAgICB5OiB5KHllVmFsdWUoZCkpLFxuICAgICAgdGlqZHN0aXBSZWdpc3RyYXRpZTogeGJWYWx1ZShkKSxcbiAgICAgIGVpbmRSZWdpc3RyYXRpZTogeGVWYWx1ZShkKSxcbiAgICAgIGJlZ2luR2VsZGlnaGVpZDogeWJWYWx1ZShkKSxcbiAgICAgIGVpbmRHZWxkaWdoZWlkOiB5ZVZhbHVlKGQpLFxuICAgICAgdmFsdWU6IHZhbHVlKGQpLFxuICAgICAgd2lkdGg6IHgoeGVWYWx1ZShkKSkgLSB4KHhiVmFsdWUoZCkpLFxuICAgICAgaGVpZ2h0OiB5KHliVmFsdWUoZCkpIC0geSh5ZVZhbHVlKGQpKSxcbiAgICB9KSk7XG5cbiAgICAvLyBjcmVhdGUgYSB0b29sdGlwXG4gICAgLy8gcmVmIGh0dHBzOi8vZDMtZ3JhcGgtZ2FsbGVyeS5jb20vZ3JhcGgvaW50ZXJhY3Rpdml0eV90b29sdGlwLmh0bWwjbW9zdGJhc2ljXG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjUxMzQ4NTgvZDMtbW91c2UtaXMtbm90LWEtZnVuY3Rpb25cbiAgICAvL1xuICAgIHZhciB0b29sdGlwID0gZDNcbiAgICAgIC5zZWxlY3QoJyN0aW1lcGxvdCcpXG4gICAgICAuYXBwZW5kKCdkaXYnKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICAgIC5hdHRyKCdjbGFzcycsICd0b29sdGlwJylcbiAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ2JvcmRlcicsICdzb2xpZCcpXG4gICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcbiAgICAgIC5zdHlsZSgnYm9yZGVyLXdpZHRoJywgJzJweCcpXG4gICAgICAuc3R5bGUoJ2JvcmRlci1yYWRpdXMnLCAnNXB4JylcbiAgICAgIC5zdHlsZSgncGFkZGluZycsICc1cHgnKVxuICAgICAgLnN0eWxlKCd6LWluZGV4JywgJzEwMCcpO1xuXG4gICAgbGV0IG1vdXNlb3ZlciA9IGZ1bmN0aW9uIChldmVudCwgZCkge1xuICAgICAgdG9vbHRpcC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsICdyZWQnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcbiAgICB9O1xuXG4gICAgbGV0IG1vdXNlbW92ZSA9IGZ1bmN0aW9uIChldmVudCwgZCkge1xuICAgICAgdG9vbHRpcFxuICAgICAgICAuaHRtbChcbiAgICAgICAgICAndmFsdWU6ICcgK1xuICAgICAgICAgICAgZC52YWx1ZSArXG4gICAgICAgICAgICAnPGJyLz4nICtcbiAgICAgICAgICAgICcgYmVnaW5yZWc6ICcgK1xuICAgICAgICAgICAgZC50aWpkc3RpcFJlZ2lzdHJhdGllICtcbiAgICAgICAgICAgICc8YnIvPicgK1xuICAgICAgICAgICAgJyBlaW5kcmVnOiAnICtcbiAgICAgICAgICAgIGQuZWluZFJlZ2lzdHJhdGllICtcbiAgICAgICAgICAgICc8YnIvPicgK1xuICAgICAgICAgICAgJyBiZWdpbmdlbGQ6ICcgK1xuICAgICAgICAgICAgZC5iZWdpbkdlbGRpZ2hlaWQgK1xuICAgICAgICAgICAgJzxici8+JyArXG4gICAgICAgICAgICAnIGVpbmRnZWxkOiAnICtcbiAgICAgICAgICAgIGQuZWluZEdlbGRpZ2hlaWRcbiAgICAgICAgKVxuICAgICAgICAuc3R5bGUoJ2xlZnQnLCBldmVudC5wYWdlWCArIDUgKyAncHgnKVxuICAgICAgICAuc3R5bGUoJ3RvcCcsIGV2ZW50LnBhZ2VZICsgNSArICdweCcpO1xuICAgIH07XG5cbiAgICBsZXQgbW91c2VsZWF2ZSA9IGZ1bmN0aW9uIChldmVudCwgZCkge1xuICAgICAgdG9vbHRpcC5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMC44KTtcbiAgICB9O1xuXG4gICAgLy8gRHJhdyB0aGUgZ3JhcGhcbiAgICBzZWxlY3Rpb25cbiAgICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgLmRhdGEobWFya3MpXG4gICAgICAuam9pbigncmVjdCcpXG4gICAgICAuYXR0cigneCcsIChkKSA9PiBkLngpXG4gICAgICAuYXR0cigneScsIChkKSA9PiBkLnkpXG4gICAgICAuYXR0cignd2lkdGgnLCAoZCkgPT4gZC53aWR0aClcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCAoZCkgPT4gZC5oZWlnaHQpXG4gICAgICAub24oJ21vdXNlb3ZlcicsIG1vdXNlb3ZlcilcbiAgICAgIC5vbignbW91c2Vtb3ZlJywgbW91c2Vtb3ZlKVxuICAgICAgLm9uKCdtb3VzZWxlYXZlJywgbW91c2VsZWF2ZSk7XG5cbiAgICBzZWxlY3Rpb25cbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoXG4gICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LDApYFxuICAgICAgKVxuICAgICAgLmNhbGwoYXhpc0xlZnQoeSkpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKFxuICAgICAgICAndHJhbnNmb3JtJyxcbiAgICAgICAgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCAtIG1hcmdpbi5ib3R0b219KWBcbiAgICAgIClcbiAgICAgIC5jYWxsKGF4aXNCb3R0b20oeCkpO1xuICB9O1xuXG4gIG15LndpZHRoID0gZnVuY3Rpb24gKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyAoKHdpZHRoID0gK18pLCBteSlcbiAgICAgIDogd2lkdGg7XG4gIH07XG5cbiAgbXkuaGVpZ2h0ID0gZnVuY3Rpb24gKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyAoKGhlaWdodCA9ICtfKSwgbXkpXG4gICAgICA6IGhlaWdodDtcbiAgfTtcblxuICBteS5kYXRhID0gZnVuY3Rpb24gKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyAoKGRhdGEgPSBfKSwgbXkpXG4gICAgICA6IGRhdGE7XG4gIH07XG5cbiAgbXkueGJWYWx1ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gKCh4YlZhbHVlID0gXyksIG15KVxuICAgICAgOiB4YlZhbHVlO1xuICB9O1xuXG4gIG15LnhlVmFsdWUgPSBmdW5jdGlvbiAoXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/ICgoeGVWYWx1ZSA9IF8pLCBteSlcbiAgICAgIDogeGVWYWx1ZTtcbiAgfTtcblxuICBteS55YlZhbHVlID0gZnVuY3Rpb24gKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyAoKHliVmFsdWUgPSBfKSwgbXkpXG4gICAgICA6IHliVmFsdWU7XG4gIH07XG4gIG15LnllVmFsdWUgPSBmdW5jdGlvbiAoXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/ICgoeWVWYWx1ZSA9IF8pLCBteSlcbiAgICAgIDogeWVWYWx1ZTtcbiAgfTtcblxuICBteS5tYXJnaW4gPSBmdW5jdGlvbiAoXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/ICgobWFyZ2luID0gXyksIG15KVxuICAgICAgOiBtYXJnaW47XG4gIH07XG5cbiAgbXkueFdpZHRoID0gZnVuY3Rpb24gKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyAoKHhXaWR0aCA9IF8pLCBteSlcbiAgICAgIDogeFdpZHRoO1xuICB9O1xuXG4gIG15LnlIZWlnaHQgPSBmdW5jdGlvbiAoXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/ICgoeUhlaWdodCA9IF8pLCBteSlcbiAgICAgIDogeUhlaWdodDtcbiAgfTtcblxuICBteS52YWx1ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gKCh2YWx1ZSA9IF8pLCBteSlcbiAgICAgIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIG15O1xufTtcbiIsImltcG9ydCB7IG1heCwgc2VsZWN0IH0gZnJvbSAnZDMnO1xuaW1wb3J0IHsgdGltZVRhYmxlIH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IHRpbWVQbG90IH0gZnJvbSAnLi90aW1lUGxvdCc7XG5cbmNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5jb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnI3RpbWVwbG90JylcbiAgLmFwcGVuZCgnc3ZnJylcbiAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpO1xuXG5cbmNvbnN0IGRyYXdHcmFwaCA9IGFzeW5jICgpID0+IHtcbiAgc3ZnLmNhbGwoXG4gICAgdGltZVBsb3QoKVxuICAgICAgLndpZHRoKHdpZHRoKVxuICAgICAgLmhlaWdodChoZWlnaHQpXG4gICAgICAuZGF0YSh0aW1lVGFibGUpXG4gICAgICAueGJWYWx1ZSgoZCkgPT4gZC50aWpkc3RpcFJlZ2lzdHJhdGllKVxuICAgICAgLnhlVmFsdWUoKGQpID0+IGQuZWluZFJlZ2lzdHJhdGllKVxuICAgICAgLnliVmFsdWUoKGQpID0+IGQuYmVnaW5HZWxkaWdoZWlkKVxuICAgICAgLnllVmFsdWUoKGQpID0+IGQuZWluZEdlbGRpZ2hlaWQpXG4gICAgICAudmFsdWUoKGQpID0+IGQudmFsdWUpXG4gICAgICAubWFyZ2luKHtcbiAgICAgICAgdG9wOiAyMCxcbiAgICAgICAgcmlnaHQ6IDIwLFxuICAgICAgICBib3R0b206IDQwLFxuICAgICAgICBsZWZ0OiA1MCxcbiAgICAgIH0pXG4gICk7XG59O1xuXG5kcmF3R3JhcGgoKTtcbiJdLCJuYW1lcyI6WyJtYXgiLCJzY2FsZVRpbWUiLCJtaW4iLCJheGlzTGVmdCIsImF4aXNCb3R0b20iLCJzZWxlY3QiXSwibWFwcGluZ3MiOiI7OztFQUNBLE1BQU0sV0FBVyxHQUFHO0VBQ3BCLEVBQUU7RUFDRixJQUFJLG1CQUFtQixFQUFFLHFCQUFxQjtFQUM5QyxJQUFJLGVBQWUsR0FBRyxxQkFBcUI7RUFDM0MsSUFBSSxlQUFlLEVBQUUsWUFBWTtFQUNqQyxJQUFJLGNBQWMsRUFBRSxJQUFJO0VBQ3hCLElBQUksS0FBSyxFQUFFLFVB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RUFDekIsSUFBSSxPQUFPLFNBQVMsQ0FBQyxNQUFNO0VBQzNCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUU7RUFDdkIsUUFBUSxJQUFJLENBQUM7RUFDYixHQUFHLENBQUM7QUFDSjtFQUNBLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsRUFBRTtFQUM1QixJQUFJLE9BQU8sU0FBUyxDQUFDLE1BQU07RUFDM0IsU0FBUyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRTtFQUMxQixRQUFRLE9BQU8sQ0FBQztFQUNoQixHQUFHLENBQUM7QUFDSjtFQUNBLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsRUFBRTtFQUM1QixJQUFJLE9BQU8sU0FBUyxDQUFDLE1BQU07RUFDM0IsU0FBUyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRTtFQUMxQixRQUFRLE9BQU8sQ0FBQztFQUNoQixHQUFHLENBQUM7QUFDSjtFQUNBLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsRUFBRTtFQUM1QixJQUFJLE9BQU8sU0FBUyxDQUFDLE1BQU07RUFDM0IsU0FBUyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRTtFQUMxQixRQUFRLE9BQU8sQ0FBQztFQUNoQixHQUFHLENBQUM7RUFDSixFQUFFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEVBQUU7RUFDNUIsSUFBSSxPQUFPLFNBQVMsQ0FBQyxNQUFNO0VBQzNCLFNBQVMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUU7RUFDMUIsUUFBUSxPQUFPLENBQUM7RUFDaEIsR0FBRyxDQUFDO0FBQ0o7RUFDQSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLEVBQUU7RUFDM0IsSUFBSSxPQUFPLFNBQVMsQ0FBQyxNQUFNO0VBQzNCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUU7RUFDekIsUUFBUSxNQUFNLENBQUM7RUFDZixHQUFHLENBQUM7QUFDSjtFQUNBLEVBQUUsRUFBRSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsRUFBRTtFQUMzQixJQUFJLE9BQU8sU0FBUyxDQUFDLE1BQU07RUFDM0IsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRTtFQUN6QixRQUFRLE1BQU0sQ0FBQztFQUNmLEdBQUcsQ0FBQztBQUNKO0VBQ0EsRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0VBQzVCLElBQUksT0FBTyxTQUFTLENBQUMsTUFBTTtFQUMzQixTQUFTLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFO0VBQzFCLFFBQVEsT0FBTyxDQUFDO0VBQ2hCLEdBQUcsQ0FBQztBQUNKO0VBQ0EsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0VBQzFCLElBQUksT0FBTyxTQUFTLENBQUMsTUFBTTtFQUMzQixTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFO0VBQ3hCLFFBQVEsS0FBSyxDQUFDO0VBQ2QsR0FBRyxDQUFDO0FBQ0o7RUFDQSxFQUFFLE9BQU8sRUFBRSxDQUFDO0VBQ1osQ0FBQzs7RUMxUEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztFQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ2xDO0VBQ0EsTUFBTSxHQUFHLEdBQUdDLFdBQU0sQ0FBQyxXQUFXLENBQUM7RUFDL0IsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0VBQ2hCLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7RUFDdkIsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFCO0FBQ0E7RUFDQSxNQUFNLFNBQVMsR0FBRyxZQUFZO0VBQzlCLEVBQUUsR0FBRyxDQUFDLElBQUk7RUFDVixJQUFJLFFBQVEsRUFBRTtFQUNkLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztFQUNuQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0VBQ3RCLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztFQUM1QyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDO0VBQ3hDLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUM7RUFDeEMsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQztFQUN2QyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0VBQzVCLE9BQU8sTUFBTSxDQUFDO0VBQ2QsUUFBUSxHQUFHLEVBQUUsRUFBRTtFQUNmLFFBQVEsS0FBSyxFQUFFLEVBQUU7RUFDakIsUUFBUSxNQUFNLEVBQUUsRUFBRTtFQUNsQixRQUFRLElBQUksRUFBRSxFQUFFO0VBQ2hCLE9BQU8sQ0FBQztFQUNSLEdBQUcsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNGO0VBQ0EsU0FBUyxFQUFFOzs7OyJ9