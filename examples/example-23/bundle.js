(function (d3) {
  'use strict';

  console.log(d3.select);

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height);

  const nh = height / 20;
  const nv = width / 20;

  svg
    .append('g')
    .selectAll('rect') // no rects available
    .data(d3.range(nh)) // use data array
    .join('rect')
    .attr('y', (d) => d * 20)
    .attr('width', width)
    .attr('height', 10)
    .attr('mask', 'url(#mask-1)');

  svg
    .append('g')
    .selectAll('rect') // no rects available
    .data(d3.range(nv)) // use data array
    .join('rect')
    .attr('x', (d) => d * 20)
    .attr('width', 10)
    .attr('height', height)
    .attr('mask', 'url(#mask-2)');

  const renderMask = (selection, id, inverted) => {
    const mask = selection
      .append('mask')
      .attr('id', id); 

    mask
      .append('rect')
      .attr('width', width)
      .attr('height', height)
      .attr('fill', inverted ? 'black' : 'white');

  //  const g = mask
  //    .append('g')
  //    .attr(
  //      'transform',
  //      `translate(${width / 2},${height / 2})`
  //    );
    
    mask.selectAll('g')
      .data(d3.range(d3.symbols.length))
    	.join((enter) => 
            enter
            .append('g')
            .attr('transform', (d) => `translate(${d*125 + 100},${height/2})`)
            .append('path')
    				.attr('d', (d) => d3.symbol(d3.symbols[d], 8000)())
    				.attr('fill', inverted ? 'white' : 'black')
    );
    

    //    .append('path')
    //    .attr('d', symbol(symbols[1], 100000)())
    //    .attr('fill', inverted ? 'black' : 'white');
  };

  //renderMask(svg, 'mask-1', false);
  //renderMask(svg, 'mask-2', true);

  svg
    .call(renderMask, 'mask-1', false)
    .call(renderMask, 'mask-2', true);

  //const mask2 = svg
  //  .append('mask')
  //  .attr('id', 'mask-2');
  //
  //mask2
  //  .append('rect')
  //  .attr('width', width)
  //  .attr('height', height)
  //  .attr('fill', 'white');
  //
  //mask2
  //  .append('g')
  //	.attr('transform', `translate(${width/2},${height/2})`)
  //  .append('path')
  //  .attr('d', symbol(symbols[1], 100000)())
  //  .attr('fill', 'black');

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IHJhbmdlIH0gZnJvbSAnZDMnO1xuaW1wb3J0IHsgc3ltYm9sLCBzeW1ib2xzIH0gZnJvbSAnZDMnO1xuXG5jb25zb2xlLmxvZyhzZWxlY3QpO1xuXG5jb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ2JvZHknKVxuICAuYXBwZW5kKCdzdmcnKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG5cbmNvbnN0IG5oID0gaGVpZ2h0IC8gMjA7XG5jb25zdCBudiA9IHdpZHRoIC8gMjA7XG5cbnN2Z1xuICAuYXBwZW5kKCdnJylcbiAgLnNlbGVjdEFsbCgncmVjdCcpIC8vIG5vIHJlY3RzIGF2YWlsYWJsZVxuICAuZGF0YShyYW5nZShuaCkpIC8vIHVzZSBkYXRhIGFycmF5XG4gIC5qb2luKCdyZWN0JylcbiAgLmF0dHIoJ3knLCAoZCkgPT4gZCAqIDIwKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIDEwKVxuICAuYXR0cignbWFzaycsICd1cmwoI21hc2stMSknKTtcblxuc3ZnXG4gIC5hcHBlbmQoJ2cnKVxuICAuc2VsZWN0QWxsKCdyZWN0JykgLy8gbm8gcmVjdHMgYXZhaWxhYmxlXG4gIC5kYXRhKHJhbmdlKG52KSkgLy8gdXNlIGRhdGEgYXJyYXlcbiAgLmpvaW4oJ3JlY3QnKVxuICAuYXR0cigneCcsIChkKSA9PiBkICogMjApXG4gIC5hdHRyKCd3aWR0aCcsIDEwKVxuICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAuYXR0cignbWFzaycsICd1cmwoI21hc2stMiknKTtcblxuY29uc3QgcmVuZGVyTWFzayA9IChzZWxlY3Rpb24sIGlkLCBpbnZlcnRlZCkgPT4ge1xuICBjb25zdCBtYXNrID0gc2VsZWN0aW9uXG4gICAgLmFwcGVuZCgnbWFzaycpXG4gICAgLmF0dHIoJ2lkJywgaWQpOyBcblxuICBtYXNrXG4gICAgLmFwcGVuZCgncmVjdCcpXG4gICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICAuYXR0cignZmlsbCcsIGludmVydGVkID8gJ2JsYWNrJyA6ICd3aGl0ZScpO1xuXG4vLyAgY29uc3QgZyA9IG1hc2tcbi8vICAgIC5hcHBlbmQoJ2cnKVxuLy8gICAgLmF0dHIoXG4vLyAgICAgICd0cmFuc2Zvcm0nLFxuLy8gICAgICBgdHJhbnNsYXRlKCR7d2lkdGggLyAyfSwke2hlaWdodCAvIDJ9KWBcbi8vICAgICk7XG4gIFxuICBtYXNrLnNlbGVjdEFsbCgnZycpXG4gICAgLmRhdGEocmFuZ2Uoc3ltYm9scy5sZW5ndGgpKVxuICBcdC5qb2luKChlbnRlcikgPT4gXG4gICAgICAgICAgZW50ZXJcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IGB0cmFuc2xhdGUoJHtkKjEyNSArIDEwMH0sJHtoZWlnaHQvMn0pYClcbiAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgXHRcdFx0XHQuYXR0cignZCcsIChkKSA9PiBzeW1ib2woc3ltYm9sc1tkXSwgODAwMCkoKSlcbiAgXHRcdFx0XHQuYXR0cignZmlsbCcsIGludmVydGVkID8gJ3doaXRlJyA6ICdibGFjaycpXG4gICk7XG4gIFxuXG4gIC8vICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAvLyAgICAuYXR0cignZCcsIHN5bWJvbChzeW1ib2xzWzFdLCAxMDAwMDApKCkpXG4gIC8vICAgIC5hdHRyKCdmaWxsJywgaW52ZXJ0ZWQgPyAnYmxhY2snIDogJ3doaXRlJyk7XG59O1xuXG4vL3JlbmRlck1hc2soc3ZnLCAnbWFzay0xJywgZmFsc2UpO1xuLy9yZW5kZXJNYXNrKHN2ZywgJ21hc2stMicsIHRydWUpO1xuXG5zdmdcbiAgLmNhbGwocmVuZGVyTWFzaywgJ21hc2stMScsIGZhbHNlKVxuICAuY2FsbChyZW5kZXJNYXNrLCAnbWFzay0yJywgdHJ1ZSk7XG5cbi8vY29uc3QgbWFzazIgPSBzdmdcbi8vICAuYXBwZW5kKCdtYXNrJylcbi8vICAuYXR0cignaWQnLCAnbWFzay0yJyk7XG4vL1xuLy9tYXNrMlxuLy8gIC5hcHBlbmQoJ3JlY3QnKVxuLy8gIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuLy8gIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpXG4vLyAgLmF0dHIoJ2ZpbGwnLCAnd2hpdGUnKTtcbi8vXG4vL21hc2syXG4vLyAgLmFwcGVuZCgnZycpXG4vL1x0LmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt3aWR0aC8yfSwke2hlaWdodC8yfSlgKVxuLy8gIC5hcHBlbmQoJ3BhdGgnKVxuLy8gIC5hdHRyKCdkJywgc3ltYm9sKHN5bWJvbHNbMV0sIDEwMDAwMCkoKSlcbi8vICAuYXR0cignZmlsbCcsICdibGFjaycpO1xuIl0sIm5hbWVzIjpbInNlbGVjdCIsInJhbmdlIiwic3ltYm9scyIsInN5bWJvbCJdLCJtYXBwaW5ncyI6Ijs7O0VBSUEsT0FBTyxDQUFDLEdBQUcsQ0FBQ0EsU0FBTSxDQUFDLENBQUM7QUFDcEI7RUFDQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0VBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDbEM7RUFDQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLE1BQU0sQ0FBQztFQUMxQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDaEIsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztFQUN2QixHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDMUI7RUFDQSxNQUFNLEVBQUUsR0FBRyxNQUFNLEdBQUcs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