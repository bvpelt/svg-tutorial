(function (d3) {
  'use strict';

  console.log(d3.select);

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height);

  // split data and visualisation
  /// generate data
  //const n = height/2;
  //const marks = [];
  //for (let i = 0; i < n; i++) {
  //  marks.push({
  //    y: i * 20,
  //    width: width,
  //    height: 10,
  //    mask: 'url(#circle-mask)'
  //  });
  //}

  /// visualisation of data
  //svg
  //  .selectAll('rect') // no rects available
  //  .data(marks)       // use data array
  //  .join('rect')
  //  .attr('y', (d) => d.y)
  //  .attr('width', (d) => d.width)
  //  .attr('height', (d) => d.height)
  //  .attr('mask', (d) => d.mask)
  //;

  // combined

  const nh = height / 2;
  const nv = width / 2;
  //console.log(range(n));

  /// visualisation of data
  svg
    .selectAll('rect#horizontal') // no rects available
    .data(d3.range(nh)) // use data array
    .join('rect')
    .attr('y', (d) => d * 20)
    .attr('width', width)
    .attr('height', 10)
    .attr('class', 'horizontal')
    .attr('mask', 'url(#circle-mask)');

  svg
    .selectAll('rect#vertical') // no rects available
    .data(d3.range(nv)) // use data array
    .join('rect')
    .attr('x', (d) => d * 20)
    .attr('width', 10)
    .attr('height', height)
    .attr('class', 'vertical')
    .attr('mask', 'url(#circle-mask-2)');

  const mask = svg
    .append('mask')
    .attr('id', 'circle-mask');
  mask
    .append('rect')
    .attr('width', width)
    .attr('height', height)
    .attr('fill', 'black');

  mask
    .append('circle')
    .attr('cx', width / 2)
    .attr('cy', height / 2)
    .attr('r', 200)
    .attr('fill', 'white');

  const mask2 = svg
    .append('mask')
    .attr('id', 'circle-mask-2');
  mask2
    .append('rect')
    .attr('width', width)
    .attr('height', height)
    .attr('fill', 'white');

  mask2
    .append('circle')
    .attr('cx', width / 2)
    .attr('cy', height / 2)
    .attr('r', 200)
    .attr('fill', 'black');

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IHJhbmdlIH0gZnJvbSAnZDMnO1xuXG5jb25zb2xlLmxvZyhzZWxlY3QpO1xuXG5jb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ2JvZHknKVxuICAuYXBwZW5kKCdzdmcnKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG5cbi8vIHNwbGl0IGRhdGEgYW5kIHZpc3VhbGlzYXRpb25cbi8vLyBnZW5lcmF0ZSBkYXRhXG4vL2NvbnN0IG4gPSBoZWlnaHQvMjtcbi8vY29uc3QgbWFya3MgPSBbXTtcbi8vZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbi8vICBtYXJrcy5wdXNoKHtcbi8vICAgIHk6IGkgKiAyMCxcbi8vICAgIHdpZHRoOiB3aWR0aCxcbi8vICAgIGhlaWdodDogMTAsXG4vLyAgICBtYXNrOiAndXJsKCNjaXJjbGUtbWFzayknXG4vLyAgfSk7XG4vL31cblxuLy8vIHZpc3VhbGlzYXRpb24gb2YgZGF0YVxuLy9zdmdcbi8vICAuc2VsZWN0QWxsKCdyZWN0JykgLy8gbm8gcmVjdHMgYXZhaWxhYmxlXG4vLyAgLmRhdGEobWFya3MpICAgICAgIC8vIHVzZSBkYXRhIGFycmF5XG4vLyAgLmpvaW4oJ3JlY3QnKVxuLy8gIC5hdHRyKCd5JywgKGQpID0+IGQueSlcbi8vICAuYXR0cignd2lkdGgnLCAoZCkgPT4gZC53aWR0aClcbi8vICAuYXR0cignaGVpZ2h0JywgKGQpID0+IGQuaGVpZ2h0KVxuLy8gIC5hdHRyKCdtYXNrJywgKGQpID0+IGQubWFzaylcbi8vO1xuXG4vLyBjb21iaW5lZFxuXG5jb25zdCBuaCA9IGhlaWdodCAvIDI7XG5jb25zdCBudiA9IHdpZHRoIC8gMjtcbi8vY29uc29sZS5sb2cocmFuZ2UobikpO1xuXG4vLy8gdmlzdWFsaXNhdGlvbiBvZiBkYXRhXG5zdmdcbiAgLnNlbGVjdEFsbCgncmVjdCNob3Jpem9udGFsJykgLy8gbm8gcmVjdHMgYXZhaWxhYmxlXG4gIC5kYXRhKHJhbmdlKG5oKSkgLy8gdXNlIGRhdGEgYXJyYXlcbiAgLmpvaW4oJ3JlY3QnKVxuICAuYXR0cigneScsIChkKSA9PiBkICogMjApXG4gIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAuYXR0cignaGVpZ2h0JywgMTApXG4gIC5hdHRyKCdjbGFzcycsICdob3Jpem9udGFsJylcbiAgLmF0dHIoJ21hc2snLCAndXJsKCNjaXJjbGUtbWFzayknKTtcblxuc3ZnXG4gIC5zZWxlY3RBbGwoJ3JlY3QjdmVydGljYWwnKSAvLyBubyByZWN0cyBhdmFpbGFibGVcbiAgLmRhdGEocmFuZ2UobnYpKSAvLyB1c2UgZGF0YSBhcnJheVxuICAuam9pbigncmVjdCcpXG4gIC5hdHRyKCd4JywgKGQpID0+IGQgKiAyMClcbiAgLmF0dHIoJ3dpZHRoJywgMTApXG4gIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpXG4gIC5hdHRyKCdjbGFzcycsICd2ZXJ0aWNhbCcpXG4gIC5hdHRyKCdtYXNrJywgJ3VybCgjY2lyY2xlLW1hc2stMiknKTtcblxuY29uc3QgbWFzayA9IHN2Z1xuICAuYXBwZW5kKCdtYXNrJylcbiAgLmF0dHIoJ2lkJywgJ2NpcmNsZS1tYXNrJyk7XG5tYXNrXG4gIC5hcHBlbmQoJ3JlY3QnKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKTtcblxubWFza1xuICAuYXBwZW5kKCdjaXJjbGUnKVxuICAuYXR0cignY3gnLCB3aWR0aCAvIDIpXG4gIC5hdHRyKCdjeScsIGhlaWdodCAvIDIpXG4gIC5hdHRyKCdyJywgMjAwKVxuICAuYXR0cignZmlsbCcsICd3aGl0ZScpO1xuXG5jb25zdCBtYXNrMiA9IHN2Z1xuICAuYXBwZW5kKCdtYXNrJylcbiAgLmF0dHIoJ2lkJywgJ2NpcmNsZS1tYXNrLTInKTtcbm1hc2syXG4gIC5hcHBlbmQoJ3JlY3QnKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgLmF0dHIoJ2ZpbGwnLCAnd2hpdGUnKTtcblxubWFzazJcbiAgLmFwcGVuZCgnY2lyY2xlJylcbiAgLmF0dHIoJ2N4Jywgd2lkdGggLyAyKVxuICAuYXR0cignY3knLCBoZWlnaHQgLyAyKVxuICAuYXR0cigncicsIDIwMClcbiAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKTtcbiJdLCJuYW1lcyI6WyJzZWxlY3QiLCJyYW5nZSJdLCJtYXBwaW5ncyI6Ijs7O0VBR0EsT0FBTyxDQUFDLEdBQUcsQ0FBQ0EsU0FBTSxDQUFDLENBQUM7QUFDcEI7RUFDQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0VBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDbEM7RUFDQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLE1BQU0sQ0FBQztFQUMxQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDaEIsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztFQUN2QixHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDMUI7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0E7RUFDQTtBQUNBO0VBQ0EsTUFBTSxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUN0QixNQUFNLEVBQUUsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0VBQ3JCO0FBQ0E7RUFDQTtFQUNBLEdB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