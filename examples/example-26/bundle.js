(function (d3) {
  'use strict';

  function vizData(selection, data) {
    const barWidth = 20;
    selection
      .selectAll('circle')
      .data(data)
      .join('circle') // newer api sets
      .attr('r', (d) => d.r)
      .attr('cx', (d) => d.x)
      .attr('cy', (d) => d.y)
      .attr('fill', (d) => d.fill);
    
    selection
    .selectAll('line')
    .data(data)
    .join('line')
    .attr('x1', (d,i) => (i === 0 ? d.x : data[i-1].x))
    .attr('y1', (d,i) => (i === 0 ? d.y : data[i-1].y))
    .attr('x2', (d) => d.x)
    .attr('y2', (d) => d.y)  
    .attr('stroke', (d) => d.fill)
    .attr('stroke-width', barWidth)
    ;
    
    selection
    .selectAll('rect')
    .data(data)
    .join('rect')
    .attr('x', (d) => d.x-barWidth/2)
    .attr('y',  0)
    .attr('rx', 20)
    .attr('width', barWidth)
    .attr('height', (d) => d.y)
    .attr('fill', (d) => d.fill)
    ;
  }

  function red(t) {
    const red = 125 + Math.sin(t) * 125;
    
    return red;
  }

  function green(t) {
    const green = 125 + Math.sin(2*t) * 125;
    
    return green;
  }


  function blue(t) {
    const blue = 125 + Math.sin(t/2) * 125;
    
    return blue;
  }

  function makeData(n, t) {
     const data = d3.range(n).map((d) => ({
      x: d * 60 + 50,
      y: 250 + Math.sin(d * 0.5 + t) * 220,
      r: 20 + Math.sin(d * 0.5 + 6*2) * 10,
      fill: 'rgb(' + red(t) + ',' + green(t) + ',' + blue(t) + ')'
    }));
    
    return data;
  }

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3.select('body') // d3 selection
    .append('svg')
    .attr('width', width)
    .attr('height', height);

  //
  // loose coupling + animation
  //

  let t = 0;
  const speed = 1000/60;
  setInterval(() => {
    const n = 10 + Math.sin(t) * 5;
    const data = makeData(n,t);

    // vizData(svg, data);
    svg.call(vizData, data); 
    
    t = (t + 0.01) % speed;
  }, speed);

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInZpekRhdGEuanMiLCJtYWtlRGF0YS5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB2aXpEYXRhKHNlbGVjdGlvbiwgZGF0YSkge1xuICBjb25zdCBiYXJXaWR0aCA9IDIwO1xuICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgIC5kYXRhKGRhdGEpXG4gICAgLmpvaW4oJ2NpcmNsZScpIC8vIG5ld2VyIGFwaSBzZXRzXG4gICAgLmF0dHIoJ3InLCAoZCkgPT4gZC5yKVxuICAgIC5hdHRyKCdjeCcsIChkKSA9PiBkLngpXG4gICAgLmF0dHIoJ2N5JywgKGQpID0+IGQueSlcbiAgICAuYXR0cignZmlsbCcsIChkKSA9PiBkLmZpbGwpO1xuICBcbiAgc2VsZWN0aW9uXG4gIC5zZWxlY3RBbGwoJ2xpbmUnKVxuICAuZGF0YShkYXRhKVxuICAuam9pbignbGluZScpXG4gIC5hdHRyKCd4MScsIChkLGkpID0+IChpID09PSAwID8gZC54IDogZGF0YVtpLTFdLngpKVxuICAuYXR0cigneTEnLCAoZCxpKSA9PiAoaSA9PT0gMCA/IGQueSA6IGRhdGFbaS0xXS55KSlcbiAgLmF0dHIoJ3gyJywgKGQpID0+IGQueClcbiAgLmF0dHIoJ3kyJywgKGQpID0+IGQueSkgIFxuICAuYXR0cignc3Ryb2tlJywgKGQpID0+IGQuZmlsbClcbiAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIGJhcldpZHRoKVxuICA7XG4gIFxuICBzZWxlY3Rpb25cbiAgLnNlbGVjdEFsbCgncmVjdCcpXG4gIC5kYXRhKGRhdGEpXG4gIC5qb2luKCdyZWN0JylcbiAgLmF0dHIoJ3gnLCAoZCkgPT4gZC54LWJhcldpZHRoLzIpXG4gIC5hdHRyKCd5JywgIDApXG4gIC5hdHRyKCdyeCcsIDIwKVxuICAuYXR0cignd2lkdGgnLCBiYXJXaWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIChkKSA9PiBkLnkpXG4gIC5hdHRyKCdmaWxsJywgKGQpID0+IGQuZmlsbClcbiAgO1xufVxuIiwiaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICdkMyc7XG5cbmZ1bmN0aW9uIHJlZCh0KSB7XG4gIGNvbnN0IHJlZCA9IDEyNSArIE1hdGguc2luKHQpICogMTI1O1xuICBcbiAgcmV0dXJuIHJlZDtcbn1cblxuZnVuY3Rpb24gZ3JlZW4odCkge1xuICBjb25zdCBncmVlbiA9IDEyNSArIE1hdGguc2luKDIqdCkgKiAxMjU7XG4gIFxuICByZXR1cm4gZ3JlZW47XG59XG5cblxuZnVuY3Rpb24gYmx1ZSh0KSB7XG4gIGNvbnN0IGJsdWUgPSAxMjUgKyBNYXRoLnNpbih0LzIpICogMTI1O1xuICBcbiAgcmV0dXJuIGJsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGF0YShuLCB0KSB7XG4gICBjb25zdCBkYXRhID0gcmFuZ2UobikubWFwKChkKSA9PiAoe1xuICAgIHg6IGQgKiA2MCArIDUwLFxuICAgIHk6IDI1MCArIE1hdGguc2luKGQgKiAwLjUgKyB0KSAqIDIyMCxcbiAgICByOiAyMCArIE1hdGguc2luKGQgKiAwLjUgKyA2KjIpICogMTAsXG4gICAgZmlsbDogJ3JnYignICsgcmVkKHQpICsgJywnICsgZ3JlZW4odCkgKyAnLCcgKyBibHVlKHQpICsgJyknXG4gIH0pKTtcbiAgXG4gIHJldHVybiBkYXRhO1xufTtcbiIsImltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IHZpekRhdGEgfSBmcm9tICcuL3ZpekRhdGEuanMnO1xuaW1wb3J0IHsgbWFrZURhdGEgfSBmcm9tICcuL21ha2VEYXRhLmpzJztcblxuY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbmNvbnN0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuY29uc3Qgc3ZnID0gc2VsZWN0KCdib2R5JykgLy8gZDMgc2VsZWN0aW9uXG4gIC5hcHBlbmQoJ3N2ZycpXG4gIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcblxuLy9cbi8vIGxvb3NlIGNvdXBsaW5nICsgYW5pbWF0aW9uXG4vL1xuXG5sZXQgdCA9IDA7XG5jb25zdCBzcGVlZCA9IDEwMDAvNjA7XG5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gIGNvbnN0IG4gPSAxMCArIE1hdGguc2luKHQpICogNTtcbiAgY29uc3QgZGF0YSA9IG1ha2VEYXRhKG4sdCk7XG5cbiAgLy8gdml6RGF0YShzdmcsIGRhdGEpO1xuICBzdmcuY2FsbCh2aXpEYXRhLCBkYXRhKTsgXG4gIFxuICB0ID0gKHQgKyAwLjAxKSAlIHNwZWVkO1xufSwgc3BlZWQpO1xuIl0sIm5hbWVzIjpbInJhbmdlIiwic2VsZWN0Il0sIm1hcHBpbmdzIjoiOzs7RUFBTyxTQUFTLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFO0VBQ3pDLEVBQUUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0VBQ3RCLEVBQUUsU0FBUztFQUNYLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQztFQUN4QixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDZixLQUFLLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDMUIsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0IsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0IsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNqQztFQUNBLEVBQUUsU0FBUztFQUNYLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztFQUNwQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDYixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7RUFD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